# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
  branches:
    include:
      - '*'

pool:
  vmImage: ubuntu-latest

stages:
  - stage: Build
    displayName: CI
    jobs:
      - job: Database
        steps:
          - script: psql postgresql://$(DB_USER):$(DB_PWD)@$(DB_HOST):$(DB_PORT)/postgres -f ./Sql/GfControleAcessoBase.sql
          - script: psql postgresql://$(DB_USER):$(DB_PWD)@$(DB_HOST):$(DB_PORT)/postgres -f ./Sql/GfControleAcessoScript.sql
      - job: Dotnet
        dependsOn: Database
        steps:
          - task: DotNetCoreCLI@2
            displayName: Restore
            inputs:
              command: 'restore'
              projects: '**/*.csproj'
              feedsToUse: 'select'
          - task: DotNetCoreCLI@2
            displayName: Build
            inputs:
              command: 'build'
              projects: '**/*.csproj'
              arguments: '--configuration Release'
      - job: Docker
        dependsOn:
        - Dotnet
        steps:
          - task: Docker@2
            displayName: Build Image
            inputs:
              containerRegistry: 'Docker Hub'
              repository: 'victorb96/gf-controle-acesso'
              command: 'build'
              Dockerfile: './Dockerfile'
              buildContext: '.'
              tags: |
                $(Build.BuildId)
                latest
              arguments: '--build-arg DB_HOST=$(DB_HOST) --build-arg DB_NAME=$(DB_NAME) --build-arg DB_PORT=$(DB_PORT) --build-arg DB_USER=$(DB_USER) --build-arg DB_PWD=$(DB_PWD) --build-arg JWT_CONTROLE_ACESSO_KEY=$(JWT_CONTROLE_ACESSO_KEY)'
          - task: Docker@2
            displayName: Push image
            inputs:
              containerRegistry: 'Docker Hub'
              repository: 'victorb96/gf-controle-acesso'
              command: 'push'
              tags: |
                $(Build.BuildId)
                latest
  - stage: QA
    dependsOn:
    - Build
    jobs:
      - job: Deploy
        steps:
          - task: AzureRmWebAppDeployment@4
            displayName: Deploy QA
            inputs:
              ConnectionType: 'AzureRM'
              azureSubscription: 'Assinatura do Azure 1(26954947-37d0-4d54-bbcb-0cb38650264d)'
              appType: 'webAppContainer'
              WebAppName: 'gf-controle-acesso'
              DockerNamespace: 'victorb96'
              DockerRepository: 'gf-controle-acesso'
              DockerImageTag: '$(Build.BuildId)'
  - stage: HML
    condition: eq(variables['Build.SourceBranchName'], 'main')
    jobs:
      - deployment: 
        environment: HML
        strategy:
          runOnce:
            deploy:
              steps:
                - script: echo Deploy HML
